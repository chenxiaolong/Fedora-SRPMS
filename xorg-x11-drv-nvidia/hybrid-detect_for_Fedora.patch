diff -Nru HYBRID.orig/hybrid-detect.c HYBRID/hybrid-detect.c
--- HYBRID.orig/hybrid-detect.c	2012-04-08 02:24:25.647725623 -0400
+++ HYBRID/hybrid-detect.c	2012-04-09 00:49:32.023876804 -0400
@@ -6,6 +6,9 @@
  * Authored by:
  *   Alberto Milone
  *   Evan Broder
+ *
+ * Modified for Fedora by:
+ *   Xiao-Long Chen
  * 
  * Copyright (C) 2011 Canonical Ltd
  * 
@@ -46,6 +49,7 @@
 #include <string.h>
 #include <unistd.h>
 #include <pciaccess.h>
+#include <sys/utsname.h>
 
 #define PCI_CLASS_PREHISTORIC           0x00
 
@@ -65,52 +69,35 @@
       || ((((c) & 0x00ffff00)                                           \
            == ((PCI_CLASS_PROCESSOR << 16) | (PCI_SUBCLASS_PROCESSOR_COPROC << 8)))) )
 
-#define FILENAME "/usr/share/nvidia-common/last_gfx_boot"
+#define FILENAME "/var/lib/nvidia-common/last_gfx_boot"
 
 static struct pci_slot_match match = {
     PCI_MATCH_ANY, PCI_MATCH_ANY, PCI_MATCH_ANY, PCI_MATCH_ANY, 0
 };
 
-/* Get the output of a command */
-char* get_output(char *command) {
-    FILE *pfile = NULL;
-    pfile = popen(command, "r");
-    if (pfile == NULL) {
-        fprintf(stderr, "Failed to run command\n");
-        return NULL;
-    }
-    char temp[1035];
-    char **full_output = NULL;
-    char *output = NULL;
-    full_output = (char**)calloc(1, sizeof(full_output));
-    *full_output = "\0";
-
-    while (fgets(temp, sizeof(temp)-1, pfile) != NULL) {
-        asprintf(full_output, "%s", temp);
-    }
-    pclose(pfile);
-
-    output = (char*)calloc(strlen(*full_output), sizeof(char));
-    strcpy(output, *full_output);
-    free(full_output);
-
-    /* Remove newline */
-    int len = strlen(output);
-    if(output[len-1] == '\n' )
-       output[len-1] = 0;
-
-    return output;
-}
-
 /* Get the master link of an alternative */
 char* get_alternative_link(char *arch_path, char *pattern) {
-    char command[80];
-    sprintf(command, "update-alternatives --list %s_gl_conf | grep %s",
-            arch_path, pattern);
-    char *alternative = NULL;
-    alternative = get_output(command);
-
-    return alternative;
+    /* Disable nVidia libraries by setting alternative to /dev/null
+     * mesa libraries are stored in /usr/lib{,64}, so the ld.so.conf.d
+     * files can just be disabled. */
+    if (strcmp(pattern, "mesa") == 0) {
+        /* free() is run for the 'nvidia' driver case (asprintf runs
+         * malloc(), so we'll need something that malloc()'s for the
+         * 'mesa' driver case. */
+        //return (char *)"/dev/null";
+        char *temp;
+        asprintf(&temp, "/dev/null");
+        return temp;
+    }
+    else if (strcmp(pattern, "nvidia") == 0) {
+        char *temp;
+        asprintf(&temp, "/usr/share/nvidia-common/%s.conf", arch_path);
+printf("*TEMP: %s\n", temp);
+        return temp;
+    }
+    else {
+        return NULL;
+    }
 }
 
 int main(int argc, char *argv[]) {
@@ -181,45 +168,86 @@
             fflush(pfile);
             fclose(pfile);
 
-            if (last_vendor !=0 && last_vendor != info->vendor_id) {
+            /* Change the login a little bit:
+             * In Ubuntu's version, last_vendor is checked to see if it's
+             * NOT 0, then checked to see if it matches the current vendor
+             * ID. The problem is that last_vendor defaults to 0, which
+             * means that update-alternatives won't be run if last_gfx_boot
+             * is missing or empty (initial installation). However,
+             * update-alternatives needs to run because the graphics card
+             * used during the installation could be either the Intel
+             * graphics card or the nVidia graphics card.
+             *
+             * This can altered to run update-alternatives if last_vendor
+             * equals 0 (last_gfx_boot is missing or empty) OR if
+             * last_vendor does not match the current vendor ID. */
+            if (last_vendor == 0 || last_vendor != info->vendor_id) {
                 printf("Gfx was changed in the BIOS\n");
-        
-                char *arch = NULL;
-                arch = get_output("dpkg --print-architecture");
-                if (strcmp(arch, "amd64") == 0) {
-                    arch_path = "x86_64-linux-gnu";
+
+                struct utsname uts;
+                if (uname(&uts) < 0) {
+                    fprintf(stderr, "Failed to detect CPU architecture\n");
+                    break;
                 }
-                else if (strcmp(arch, "amd64") == 0) {
-                    arch_path = "i386-linux-gnu";
+                if (strcmp(uts.machine, "x86_64") == 0) {
+                    arch_path = "nvidia-lib64";
+                }
+                else if (strcmp(uts.machine, "i686") == 0) {
+                    arch_path = "nvidia-lib";
                 }
                 else {
                     fprintf(stderr,
                             "%s is not supported for hybrid graphics\n",
-                            arch);
-                    free(arch);
+                            uts.machine);
                     break;
                 }
-                free(arch);
 
                 char *alternative = NULL;
                 alternative = get_alternative_link(arch_path, driver);
-        
+
                 if (alternative == NULL) {
                     fprintf(stderr, "Error: no alternative found\n");
                     break;
                 }
                 else {
                     /* Set the alternative */
-                    printf("Select %s\n", alternative);
+                    printf("Select %s for %s.conf\n", alternative, arch_path);
                     char command[200];
-                    sprintf(command, "update-alternatives --set %s_gl_conf %s",
+
+                    /* Set alternative for nVidia libraries */
+                    sprintf(command, "update-alternatives --set %s.conf %s",
                             arch_path, alternative);
                     system(command);
+                    free(alternative);
+
+                    /* Set alternative for nvidia libraries (xorg-x11-drv-nvidia-libs) */
+                    if (strcmp(arch_path, "nvidia-lib64") == 0 &&
+                        access("/usr/share/nvidia-common/nvidia-lib.conf", F_OK) == 0) {
+                        /* If on 64 bit system and 32 bit libraries are installed,
+                         * then also update the alternatives for the 32 bit
+                         * libraries. */
+                        alternative = get_alternative_link("nvidia-lib", driver);
+                        printf("Select %s for nvidia-lib.conf\n", alternative);
+
+                        sprintf(command, "update-alternatives --set nvidia-lib.conf %s",
+                                alternative);
+                        system(command);
+                        free(alternative);
+                    }
+
+                    /* Set alternative for Xorg configuration file */
+                    alternative = NULL;
+                    alternative = get_alternative_link("00-nvidia", driver);
+                    printf("Select %s for 00-nvidia.conf\n", alternative);
+
+                    sprintf(command, "update-alternatives --set 00-nvidia.conf %s",
+                            alternative);
+                    system(command);
+                    free(alternative);
 
                     /* call ldconfig */
                     system("LDCONFIG_NOTRIGGER=y ldconfig");
 
-                    free(alternative);
                 }
             }
             else {
